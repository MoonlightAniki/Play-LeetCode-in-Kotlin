package algo.sort

fun main() {
    println("Test Random Array")
    var n = 1000000
    var arr1 = generateRandomArray(n, 0, n)
    var arr2 = copyIntArray(arr1)
    var arr3= copyIntArray(arr1)
    var arr4 = copyIntArray(arr1)
    var arr5 = copyIntArray(arr1)
    var arr6 = copyIntArray(arr1)
    var arr7 = copyIntArray(arr1)
    var arr8 = copyIntArray(arr1)
    var arr9 = copyIntArray(arr1)
    var arr10 = copyIntArray(arr1)
//    testSort(arr1, "SelectionSort", ::selectionSort)
//    testSort(arr2, "InsertionSort", ::insertionSort)
//    testSort(arr3, "BubbleSort", ::bubbleSort)
    testSort(arr4, "ShellSort", ::shellSort)
    testSort(arr5, "HeapSort", ::heapSort)
    testSort(arr6, "MergeSort", ::mergeSort)
    testSort(arr7, "MergeSortBU", ::mergeSortBU)
    testSort(arr8, "QuickSort", ::quickSort)
    testSort(arr9, "QuickSort2Ways", ::quickSort2Ways)
    testSort(arr10, "QuickSort3Ways", ::quickSort3Ways)

    println()
    println("Test Nearly Ordered Array")
    n = 1000000
    val swapTimes = 100
    arr1 = generateNearlyOrderedArray(n, swapTimes)
    arr2 = copyIntArray(arr1)
    arr3 = copyIntArray(arr1)
    arr4 = copyIntArray(arr1)
    arr5 = copyIntArray(arr1)
    arr6 = copyIntArray(arr1)
    arr7 = copyIntArray(arr1)
    arr8 = copyIntArray(arr1)
    arr9 = copyIntArray(arr1)
    arr10 = copyIntArray(arr1)
//    testSort(arr1, "SelectionSort", ::selectionSort)
    testSort(arr2, "InsertionSort", ::insertionSort)
//    testSort(arr3, "BubbleSort", ::bubbleSort)
    testSort(arr4, "ShellSort", ::shellSort)
    testSort(arr5, "HeapSort", ::heapSort)
    testSort(arr6, "MergeSort", ::mergeSort)
    testSort(arr7, "MergeSortBU", ::mergeSortBU)
    testSort(arr8, "QuickSort", ::quickSort)
    testSort(arr9, "QuickSort2Ways", ::quickSort2Ways)
    testSort(arr10, "QuickSort3Ways", ::quickSort3Ways)


    println()
    println("Test Small Range Array")
    n = 1000000
    arr1 = generateRandomArray(n, 0, 100)
    arr2 = copyIntArray(arr1)
    arr3 = copyIntArray(arr1)
    arr4 = copyIntArray(arr1)
    arr5 = copyIntArray(arr1)
    arr6 = copyIntArray(arr1)
    arr7 = copyIntArray(arr1)
    arr8 = copyIntArray(arr1)
    arr9 = copyIntArray(arr1)
    arr10 = copyIntArray(arr1)
//    testSort(arr1, "SelectionSort", ::selectionSort)
//    testSort(arr2, "InsertionSort", ::insertionSort)
//    testSort(arr3, "BubbleSort", ::bubbleSort)
    testSort(arr4, "ShellSort", ::shellSort)
    testSort(arr5, "HeapSort", ::heapSort)
    testSort(arr6, "MergeSort", ::mergeSort)
    testSort(arr7, "MergeSortBU", ::mergeSortBU)
    testSort(arr8, "QuickSort", ::quickSort)
    testSort(arr9, "QuickSort2Ways", ::quickSort2Ways)
    testSort(arr10, "QuickSort3Ways", ::quickSort3Ways)
}